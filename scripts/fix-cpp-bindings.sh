#!/bin/bash

# Script to automatically fix all generated files to include both nostr-sdk and cdk dependencies
# Fixes: C++ bindings, TypeScript exports, and podspec frameworks
set -e

CPP_FILE="cpp/rust-nostr-nostr-sdk-react-native.cpp"
TS_FILE="src/index.tsx"
PODSPEC_FILE="NostrSdkReactNative.podspec"

echo "🔧 Fixing all files to include both nostr-sdk and cdk dependencies..."
echo "   - C++ bindings"
echo "   - TypeScript exports"  
echo "   - Podspec frameworks"

if [ ! -f "$CPP_FILE" ]; then
    echo "❌ C++ file not found: $CPP_FILE"
    exit 1
fi

# Check if the file already has both dependencies
has_nostr_include=$(grep -c "generated/nostr_sdk.hpp" "$CPP_FILE" || true)
has_cdk_include=$(grep -c "generated/cdk_ffi.hpp" "$CPP_FILE" || true)
has_nostr_register=$(grep -c "NativeNostrSdk::registerModule" "$CPP_FILE" || true)
has_cdk_register=$(grep -c "NativeCdkFfi::registerModule" "$CPP_FILE" || true)

echo "📊 Current state:"
echo "   - Nostr include: $has_nostr_include"
echo "   - CDK include: $has_cdk_include"
echo "   - Nostr register: $has_nostr_register"
echo "   - CDK register: $has_cdk_register"

# Check if C++ needs fixing
cpp_needs_fix=false
if [[ $has_nostr_include -eq 0 || $has_cdk_include -eq 0 || $has_nostr_register -eq 0 || $has_cdk_register -eq 0 ]]; then
    cpp_needs_fix=true
fi

if [[ $cpp_needs_fix == true ]]; then
    echo "🛠️  Updating C++ file to include both dependencies..."

# Create the fixed content
cat > "$CPP_FILE" << 'EOF'
// Generated by uniffi-bindgen-react-native
#include "rust-nostr-nostr-sdk-react-native.h"
#include "generated/nostr_sdk.hpp"
#include "generated/cdk_ffi.hpp"

namespace rustnostr_nostrsdkreactnative {
	using namespace facebook;

	uint8_t installRustCrate(jsi::Runtime &runtime, std::shared_ptr<react::CallInvoker> callInvoker) {
		NativeNostrSdk::registerModule(runtime, callInvoker);
		NativeCdkFfi::registerModule(runtime, callInvoker);
		return true;
	}

	uint8_t cleanupRustCrate(jsi::Runtime &runtime) {
		return false;
	}
}
EOF

    echo "✅ Fixed C++ file to include both nostr-sdk and cdk dependencies"
    echo "   - Added both header includes"
    echo "   - Added both module registrations"
else
    echo "✅ C++ file already has both dependencies configured"
fi

# Now fix the TypeScript index file
echo ""
echo "🔧 Fixing TypeScript index file..."

if [ ! -f "$TS_FILE" ]; then
    echo "❌ TypeScript file not found: $TS_FILE"
    exit 1
fi

# Check if the TypeScript file already has both dependencies
has_nostr_export=$(grep -c "export \* from './generated/nostr_sdk'" "$TS_FILE" || true)
has_cdk_export=$(grep -c "export \* from './generated/cdk_ffi'" "$TS_FILE" || true)
has_nostr_import=$(grep -c "import \* as nostr_sdk" "$TS_FILE" || true)
has_cdk_import=$(grep -c "import \* as cdk_ffi" "$TS_FILE" || true)
has_nostr_init=$(grep -c "nostr_sdk.default.initialize()" "$TS_FILE" || true)
has_cdk_init=$(grep -c "cdk_ffi.default.initialize()" "$TS_FILE" || true)

echo "📊 TypeScript current state:"
echo "   - Nostr export: $has_nostr_export"
echo "   - CDK export: $has_cdk_export"
echo "   - Nostr import: $has_nostr_import"
echo "   - CDK import: $has_cdk_import"
echo "   - Nostr init: $has_nostr_init"
echo "   - CDK init: $has_cdk_init"

# Check if TypeScript needs fixing
ts_needs_fix=false
if [[ $has_nostr_export -eq 0 || $has_cdk_export -eq 0 || $has_nostr_import -eq 0 || $has_cdk_import -eq 0 || $has_nostr_init -eq 0 || $has_cdk_init -eq 0 ]]; then
    ts_needs_fix=true
fi

if [[ $ts_needs_fix == true ]]; then
    echo "🛠️  Updating TypeScript file to include both dependencies..."

# Create the fixed TypeScript content
cat > "$TS_FILE" << 'EOF'
// Generated by uniffi-bindgen-react-native
import installer from './NativeNostrSdkReactNative';

// Register the rust crate with Hermes
// - the boolean flag ensures this loads exactly once, even if the JS
//   code is reloaded (e.g. during development with metro).
let rustInstalled = false;
if (!rustInstalled) {
  installer.installRustCrate();
  rustInstalled = true;
}

// Export the generated bindings to the app.
export * from './generated/nostr_sdk';
export * from './generated/cdk_ffi';

// Now import the bindings so we can:
// - intialize them
// - export them as namespaced objects as the default export.
import * as nostr_sdk from './generated/nostr_sdk';
import * as cdk_ffi from './generated/cdk_ffi';

// Initialize the generated bindings: mostly checksums, but also callbacks.
// - the boolean flag ensures this loads exactly once, even if the JS code
//   is reloaded (e.g. during development with metro).
let initialized = false;
if (!initialized) {
  nostr_sdk.default.initialize();
  cdk_ffi.default.initialize();
  initialized = true;
}

// Export the crates as individually namespaced objects.
export default {
  nostr_sdk,
  cdk_ffi,
};
EOF

    echo "✅ Fixed TypeScript file to include both nostr-sdk and cdk dependencies"
    echo "   - Added both exports"
    echo "   - Added both imports" 
    echo "   - Added both initializations"
    echo "   - Added both to default export"
else
    echo "✅ TypeScript file already has both dependencies configured"
fi

# Now fix the podspec file
echo ""
echo "🔧 Fixing podspec file..."

if [ ! -f "$PODSPEC_FILE" ]; then
    echo "❌ Podspec file not found: $PODSPEC_FILE"
    exit 1
fi

# Check if the podspec has both frameworks
has_nostr_framework=$(grep -c "NostrSdkFramework.xcframework" "$PODSPEC_FILE" || true)
has_cdk_framework=$(grep -c "CdkFramework.xcframework" "$PODSPEC_FILE" || true)

echo "📊 Podspec current state:"
echo "   - NostrSdk framework: $has_nostr_framework"
echo "   - CDK framework: $has_cdk_framework"

# Check if podspec needs fixing
podspec_needs_fix=false
if [[ $has_nostr_framework -eq 0 || $has_cdk_framework -eq 0 ]]; then
    podspec_needs_fix=true
fi

if [[ $podspec_needs_fix == true ]]; then
    echo "🛠️  Updating podspec to include both frameworks..."
    
    # Fix the vendored_frameworks line to include both
    if grep -q "s.vendored_frameworks" "$PODSPEC_FILE"; then
        # Replace the existing vendored_frameworks line
        sed -i '' 's/s\.vendored_frameworks = .*/s.vendored_frameworks = "NostrSdkFramework.xcframework", "CdkFramework.xcframework"/' "$PODSPEC_FILE"
    else
        # Add vendored_frameworks line if it doesn't exist (insert after source_files)
        sed -i '' '/s\.source_files/a\
  s.vendored_frameworks = "NostrSdkFramework.xcframework", "CdkFramework.xcframework"
' "$PODSPEC_FILE"
    fi
    
    echo "✅ Fixed podspec to include both frameworks"
    echo "   - NostrSdkFramework.xcframework"
    echo "   - CdkFramework.xcframework"
else
    echo "✅ Podspec already has both frameworks configured"
fi