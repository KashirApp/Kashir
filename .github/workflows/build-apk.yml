name: Build APK and Create Release

on:
  push:
    branches:
      - master

permissions:
  contents: write

jobs:
  build-apk:
    runs-on: ubuntu-latest

    steps:
      - name: Free disk space
        run: |
          echo "Available storage before cleanup:"
          df -h
          
          # Remove unnecessary tools to free up space
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          
          # Clean apt cache
          sudo apt-get clean
          
          echo "Available storage after cleanup:"
          df -h

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          submodules: recursive

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Cache Cargo dependencies and binaries
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install cargo-ndk
        run: |
          # Check if cargo-ndk is already installed (from cache)
          if ! command -v cargo-ndk &> /dev/null; then
            cargo install cargo-ndk
          fi
          rustup target add aarch64-linux-android armv7-linux-androideabi x86_64-linux-android i686-linux-android

      - name: Cache Yarn dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.yarn/berry/cache
            .yarn/cache
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: yarn install --immutable

      - name: Build Android bindings
        run: yarn ubrn:android --release

      - name: Clean up Rust build artifacts
        run: |
          echo "Disk usage before Rust cleanup:"
          df -h
          
          # Clean up Rust target directories to free space
          find deps/nostr-sdk-ffi/target -type f -name "*.rlib" -delete || true
          find deps/nostr-sdk-ffi/target -type f -name "*.rmeta" -delete || true
          find deps/nostr-sdk-ffi/target -type d -name "incremental" -exec rm -rf {} + || true
          find deps/nostr-sdk-ffi/target -type d -name "deps" -exec rm -rf {} + || true
          
          echo "Disk usage after Rust cleanup:"
          df -h

      - name: Install example dependencies
        working-directory: ./example
        run: yarn install --immutable

      - name: Build APK
        working-directory: ./example
        run: |
          # Build the release APK
          yarn build:android:release
          
          # Also run gradlew directly to ensure release APK is built
          cd android
          ./gradlew assembleRelease --stacktrace

      - name: Find and copy APK
        run: |
          # Find the generated APK (release build)
          APK_PATH=$(find example/android/app/build/outputs/apk/release -name "*.apk" | head -1)
          
          if [ -z "$APK_PATH" ]; then
            echo "No release APK found, looking in other locations"
            APK_PATH=$(find example/android/app/build/outputs/apk -name "*.apk" | head -1)
          fi
          
          if [ -n "$APK_PATH" ]; then
            echo "Found APK at: $APK_PATH"
            # Copy the APK to root directory with a consistent name
            cp "$APK_PATH" "nostr-client-example-release.apk"
            echo "APK copied to nostr-client-example-release.apk"
            ls -la nostr-client-example-release.apk
            # Set output for next steps
            echo "APK_FILE=nostr-client-example-release.apk" >> $GITHUB_ENV
          else
            echo "Error: No APK found!"
            exit 1
          fi

      - name: Verify APK exists before release
        run: |
          if [ -f "nostr-client-example-release.apk" ]; then
            echo "✅ APK file exists and is ready for upload"
            ls -la nostr-client-example-release.apk
          else
            echo "❌ APK file not found!"
            exit 1
          fi

      - name: Create or Update Release
        uses: ncipollo/release-action@v1
        with:
          tag: latest-build
          name: Latest APK Build (Release)
          body: |
            Automated release build from master branch
            
            **Build Type:** Release (Optimized)
            **Commit:** ${{ github.sha }}
            **Date:** ${{ github.event.head_commit.timestamp }}
            **Message:** ${{ github.event.head_commit.message }}
            
            This release is automatically updated on every push to master.
          artifacts: "nostr-client-example-release.apk"
          allowUpdates: true
          removeArtifacts: true
          replacesArtifacts: true
          token: ${{ secrets.GITHUB_TOKEN }} 