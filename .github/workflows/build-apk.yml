name: Build APK and Create Release

on:
  push:
    branches:
      - master
  workflow_dispatch:

concurrency:
  group: build-apk-${{ github.event_name }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  build-apk:
    runs-on: ubuntu-latest

    steps:
      - name: Free disk space
        run: |
          echo "Available storage before cleanup:"
          df -h
          
          # Remove unnecessary tools to free up space
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          
          # Clean apt cache
          sudo apt-get clean
          
          echo "Available storage after cleanup:"
          df -h

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          submodules: recursive

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Cache Cargo dependencies and binaries
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install cargo-ndk
        run: |
          # Check if cargo-ndk is already installed (from cache)
          if ! command -v cargo-ndk &> /dev/null; then
            cargo install cargo-ndk
          fi
          rustup target add aarch64-linux-android armv7-linux-androideabi x86_64-linux-android i686-linux-android

      - name: Install Protocol Buffers compiler
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler
          protoc --version

      - name: Cache Yarn dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.yarn/berry/cache
            .yarn/cache
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: yarn install --immutable

      - name: Build Android bindings
        run: yarn ubrn:android --release

      - name: Clean up Rust build artifacts
        run: |
          echo "Disk usage before Rust cleanup:"
          df -h
          
          # Clean up Rust target directories to free space
          find deps/nostr-sdk-ffi/target -type f -name "*.rlib" -delete || true
          find deps/nostr-sdk-ffi/target -type f -name "*.rmeta" -delete || true
          find deps/nostr-sdk-ffi/target -type d -name "incremental" -exec rm -rf {} + || true
          find deps/nostr-sdk-ffi/target -type d -name "deps" -exec rm -rf {} + || true
          
          echo "Disk usage after Rust cleanup:"
          df -h

      - name: Install example dependencies
        working-directory: ./example
        run: yarn install --immutable

      - name: Build APK
        working-directory: ./example
        env:
          VERSION_CODE: ${{ github.event_name != 'workflow_dispatch' && github.run_number || '1' }}
        run: |
          echo "Building APK with build number: $VERSION_CODE"
          
          # Build the release APK
          yarn build:android:release
          
          # Also run gradlew directly to ensure release APK is built
          cd android
          ./gradlew assembleRelease --stacktrace

      - name: Generate tag name from version
        run: |
          # Generate tag name using version from build.gradle
          cd example/android/app
          VERSION_NAME=$(grep 'versionName' build.gradle | sed 's/.*versionName "\(.*\)".*/\1/')
          VERSION_CODE=${{ github.run_number }}
          
          # Use different format for pre-releases (automatic) vs formal releases (manual)
          if [ "${{ github.event_name }}" != "workflow_dispatch" ]; then
            # Pre-release (automatic): include build number
            RELEASE_TITLE="${VERSION_NAME}(${VERSION_CODE})"
            APK_NAME="${VERSION_NAME}-${VERSION_CODE}"
            TAG_NAME="latest"
            echo "Creating pre-release with tag: latest, title: $RELEASE_TITLE"
          else
            # Formal release (manual): exclude build number
            RELEASE_TITLE="v${VERSION_NAME}"
            APK_NAME="v${VERSION_NAME}"
            TAG_NAME="v${VERSION_NAME}"
            echo "Creating formal release with tag: $TAG_NAME"
          fi
          
          echo "Generated tag name: $TAG_NAME"
          echo "Generated release title: $RELEASE_TITLE"
          echo "Generated APK name: $APK_NAME"
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
          echo "RELEASE_TITLE=$RELEASE_TITLE" >> $GITHUB_ENV
          echo "APK_NAME=$APK_NAME" >> $GITHUB_ENV
          echo "APK will be named: $APK_NAME.apk"

      - name: Find and copy APK
        run: |
          # Find the generated APK (release build)
          APK_PATH=$(find example/android/app/build/outputs/apk/release -name "*.apk" | head -1)
          
          if [ -z "$APK_PATH" ]; then
            echo "No release APK found, looking in other locations"
            APK_PATH=$(find example/android/app/build/outputs/apk -name "*.apk" | head -1)
          fi
          
          if [ -n "$APK_PATH" ]; then
            echo "Found APK at: $APK_PATH"
            # Create APK filename using tag name or fallback version
            APK_FILENAME="${APK_NAME}.apk"
            echo "APK filename will be: $APK_FILENAME"
            echo "APK_NAME: $APK_NAME"
            # Copy the APK to root directory with tag-based name
            cp "$APK_PATH" "$APK_FILENAME"
            echo "APK copied to $APK_FILENAME"
            ls -la "$APK_FILENAME"
            # Set output for next steps
            echo "APK_FILE=$APK_FILENAME" >> $GITHUB_ENV
          else
            echo "Error: No APK found!"
            exit 1
          fi

      - name: Verify APK exists before release
        run: |
          if [ -f "$APK_FILE" ]; then
            echo "✅ APK file exists and is ready for upload"
            ls -la "$APK_FILE"
          else
            echo "❌ APK file not found!"
            exit 1
          fi

      - name: Delete existing releases and tags
        run: |
          if [ "${{ github.event_name }}" != "workflow_dispatch" ]; then
            # For pre-releases, only delete the existing "latest" release/tag
            echo "Deleting existing 'latest' release and tag for pre-release update..."
            
            # Delete latest release if it exists
            if gh release view latest >/dev/null 2>&1; then
              echo "Deleting 'latest' release"
              gh release delete latest --yes || echo "Failed to delete 'latest' release"
            fi
            
            # Delete latest tag if it exists
            if git tag -l | grep -q "^latest$"; then
              echo "Deleting 'latest' tag"
              git push --delete origin latest || echo "Failed to delete remote 'latest' tag"
              git tag -d latest || echo "Failed to delete local 'latest' tag"
            fi
            
            echo "Pre-release cleanup completed."
          else
            # For formal releases, keep existing tags and releases
            echo "Creating formal release (keeping existing tags and releases)..."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ env.TAG_NAME }}
          name: ${{ env.RELEASE_TITLE }}
          artifacts: "${{ env.APK_FILE }}"
          makeLatest: true
          prerelease: ${{ github.event_name != 'workflow_dispatch' }}
          draft: ${{ github.event_name == 'workflow_dispatch' }}
          token: ${{ secrets.GITHUB_TOKEN }}

 